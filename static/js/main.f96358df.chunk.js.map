{"version":3,"sources":["components/Alert.js","components/Navbar.js","components/TextForm.js","components/About.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","alert","React","createElement","className","concat","role","Navbar","mode","data-bs-theme","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","Link","aria-current","to","aboutText","onClick","toggleMode","htmlFor","TextForm","_useState","useState","_useState2","_slicedToArray","text","setText","Fragment","style","color","heading","rows","value","onChange","event","target","backgroundColor","showAlert","newText","toUpperCase","toLowerCase","x","console","log","includes","split","length","About","myStyle","setMyStyle","_useState3","_useState4","btnText","setbtnText","data-bs-parent","defaultProps","App","setMode","setalert","_useState5","_useState6","message","msg","setTimeout","Router","colorMode","document","body","Switch","Route","exact","path","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.f96358df.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function Alert(props) {\r\n  return (\r\n    props.alert && <div className={`alert alert-${props.alert['type']} alert-dismissible fade show`} role=\"alert\">\r\n      <strong>{props.alert['msg']}</strong>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav\r\n      className={`navbar navbar-expand-lg bg-body-tertiary bg-${props.mode}`}\r\n      data-bs-theme={`${props.mode}`}\r\n    >\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"/\">\r\n          {props.title}\r\n        </a>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">\r\n                Home\r\n              </Link>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link\" to=\"about/\">\r\n                {props.aboutText}\r\n              </Link>\r\n            </li>\r\n          </ul>\r\n          <div className={`form-check form-switch text-${props.mode==='light'?'black':'white' | props.mode==='green'?'black':'white'}`}>\r\n            <input\r\n              className=\"form-check-input\"\r\n              type=\"checkbox\"\r\n              id=\"flexSwitchCheckDefault\"\r\n              onClick={props.toggleMode}\r\n            />\r\n            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\" >\r\n             {props.mode === \"dark\" ? \"Light\" : \"Dark\"} Mode\r\n            </label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nNavbar.propTypes = {\r\n  title: PropTypes.string,\r\n  aboutText: PropTypes.string,\r\n};\r\n\r\nNavbar.defaultProps = {\r\n  title: \"Set Title Here\",\r\n  aboutText: \"Set About Page Name here\",\r\n};\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function TextForm(props) {\r\n  const UppercaseClick = () => {\r\n    if (text === \"\" || text == null) {\r\n      props.showAlert(\"Please Enter text\", \"danger\");\r\n    } else {\r\n      let newText = text.toUpperCase();\r\n      setText(newText);\r\n      props.showAlert(\"text converted into uppercase\", \"success\");\r\n    }\r\n  };\r\n\r\n  const lowercaseClick = () => {\r\n    if (text === \"\" || text == null) {\r\n      props.showAlert(\"Please Enter text\", \"danger\");\r\n    } else {\r\n      let newText = text.toLowerCase();\r\n      setText(newText);\r\n      props.showAlert(\"text converted into lowercase\", \"success\");\r\n    }\r\n  };\r\n\r\n  const removePunc = () => {\r\n    if (text === \"\" || text == null) {\r\n      props.showAlert(\"Please Enter text\", \"danger\");\r\n    } else {\r\n      let punctuations = \"!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~\";\r\n      let newText = \"\";\r\n      props.showAlert(\"Panctuations removed from the text\", \"success\");\r\n\r\n      for (let x in text) {\r\n        x = text[x];\r\n        console.log(x);\r\n        if (punctuations.includes(x) === true) {\r\n          continue;\r\n        } else {\r\n          newText += x;\r\n        }\r\n      }\r\n      setText(newText);\r\n    }\r\n  };\r\n\r\n  const handleOnChange = (event) => {\r\n    setText(event.target.value);\r\n  };\r\n  const [text, setText] = useState(\"\");\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"container\"\r\n        style={{ color: props.mode === \"dark\" ? \"white\" : \"#042743\" | props.mode === \"green\" ? \"white\" : \"#008000\"}}\r\n      >\r\n        <div className=\"mb-3\">\r\n          <label htmlFor=\"myBox\" className=\"form-label\">\r\n            <h1>{props.heading}</h1>\r\n          </label>\r\n          <textarea\r\n            className=\"form-control\"\r\n            id=\"myBox\"\r\n            rows=\"9\"\r\n            value={text}\r\n            onChange={handleOnChange}\r\n            style={{\r\n              backgroundColor: \"white\",\r\n            }}\r\n          ></textarea>\r\n\r\n          <button className=\"btn btn-primary my-3\" onClick={UppercaseClick}>\r\n            Uppercase\r\n          </button>\r\n          <button\r\n            className=\"btn btn-primary my-3 mx-3\"\r\n            onClick={lowercaseClick}\r\n          >\r\n            Lowercase\r\n          </button>\r\n          <button className=\"btn btn-primary my-3\" onClick={removePunc}>\r\n            Remove panctuations\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      <div\r\n        className=\"container my-2\"\r\n        style={{ color: props.mode === \"dark\" ? \"white\" : \"#042743\"  | props.mode === \"green\" ? \"white\" : \"#008000\"}}\r\n      >\r\n        <h1>Your Text Summary</h1>\r\n        <p>\r\n          Your Text has{\" \"}\r\n          {text.split(\" \").length === 1 ? 0 : text.split(\" \").length} Words and{\" \"}\r\n          {text.length} Characters\r\n        </p>\r\n        <p>\r\n          {text.split(\" \").length === 1 ? 0 : 0.008 * text.split(\" \").length}{\" \"}\r\n          Minutes to read\r\n        </p>\r\n\r\n        <h2>Preview</h2>\r\n        <p>{text}</p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function About() {\r\n\r\n  const [myStyle, setMyStyle] = useState({\r\n      color : 'black',\r\n      backgroundColor : 'white'\r\n  })\r\n  \r\n  const [btnText, setbtnText] = useState(\"Enable Dark mode\")\r\n\r\n  let toggleStyle = () => {\r\n      if (myStyle.color === 'white'){\r\n        setMyStyle({\r\n          color : 'black',\r\n          backgroundColor : 'white'\r\n        })\r\n        setbtnText(\"Enable dark Mode\")\r\n      }else{\r\n        setMyStyle({\r\n          color : 'white',\r\n          backgroundColor : 'black'\r\n        })\r\n        setbtnText(\"Enable light Mode\")\r\n      }\r\n  }\r\n\r\n\r\n  return (\r\n    <div className=\"container\" style={myStyle}>\r\n      <h1>About US</h1>\r\n      <div className=\"accordion\" id=\"accordionExample\">\r\n        <div className=\"accordion-item\">\r\n          <h2 className=\"accordion-header\">\r\n            <button\r\n              className=\"accordion-button\"\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseOne\"\r\n              aria-expanded=\"true\"\r\n              aria-controls=\"collapseOne\"\r\n              style={myStyle}\r\n            >\r\n              Accordion Item #1\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseOne\"\r\n            className=\"accordion-collapse collapse show\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div className=\"accordion-body\" style={myStyle}>\r\n              <strong>This is the first item's accordion body.</strong> It is\r\n              shown by default, until the collapse plugin adds the appropriate\r\n              classes that we use to style each element. These classes control\r\n              the overall appearance, as well as the showing and hiding via CSS\r\n              transitions. You can modify any of this with custom CSS or\r\n              overriding our default variables. It's also worth noting that just\r\n              about any HTML can go within the <code>.accordion-body</code>,\r\n              though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"accordion-item\">\r\n          <h2 className=\"accordion-header\">\r\n            <button\r\n              className=\"accordion-button collapsed\"\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseTwo\"\r\n              aria-expanded=\"false\"\r\n              aria-controls=\"collapseTwo\"\r\n              style={myStyle}\r\n            >\r\n              Accordion Item #2\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseTwo\"\r\n            className=\"accordion-collapse collapse\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div className=\"accordion-body\" style={myStyle}>\r\n              <strong>This is the second item's accordion body.</strong> It is\r\n              hidden by default, until the collapse plugin adds the appropriate\r\n              classes that we use to style each element. These classes control\r\n              the overall appearance, as well as the showing and hiding via CSS\r\n              transitions. You can modify any of this with custom CSS or\r\n              overriding our default variables. It's also worth noting that just\r\n              about any HTML can go within the <code>.accordion-body</code>,\r\n              though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"accordion-item\">\r\n          <h2 className=\"accordion-header\">\r\n            <button\r\n              className=\"accordion-button collapsed\"\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseThree\"\r\n              aria-expanded=\"false\"\r\n              aria-controls=\"collapseThree\" \r\n              style={myStyle}\r\n            >\r\n              Accordion Item #3\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseThree\"\r\n            className=\"accordion-collapse collapse\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div className=\"accordion-body\" style={myStyle}>\r\n              <strong>This is the third item's accordion body.</strong> It is\r\n              hidden by default, until the collapse plugin adds the appropriate\r\n              classes that we use to style each element. These classes control\r\n              the overall appearance, as well as the showing and hiding via CSS\r\n              transitions. You can modify any of this with custom CSS or\r\n              overriding our default variables. It's also worth noting that just\r\n              about any HTML can go within the <code>.accordion-body</code>,\r\n              though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"container my-2 mx-0\">\r\n        <button onClick={toggleStyle} type=\"button\" className=\"btn btn-primary \">{btnText}</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import \"./App.css\";\nimport Alert from \"./components/Alert\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\nimport About from \"./components/About\";\nimport React, { useState } from 'react'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from 'react-router-dom'\n\nfunction App() {\n  const [mode, setMode] = useState('light')\n  const [alert, setalert] = useState('')\n  const [color, setColor] = useState('')\n\n  let showAlert = (message, type) => {\n      setalert({\n        msg:message,\n        type:type\n      })\n      setTimeout(() => {\n        setalert(null)\n      }, 2000) \n  }\n\n  const colorMode = () =>  {\n    if (mode === 'light'){\n      setMode('green')\n      document.body.style.backgroundColor = '#008000'\n      showAlert(\"Green Mode Enabled\", \"success\")\n    }else{\n      setMode('light')\n      document.body.style.backgroundColor = 'white'\n      showAlert(\"Light Mode Enabled\", \"success\")\n    }\n  }\n\n  const toggleMode = () =>  {\n    if (mode === 'light'){\n      setMode('dark')\n      document.body.style.backgroundColor = '#042743'\n      showAlert(\"Dark Mode Enabled\", \"success\")\n    }else{\n      setMode('light')\n      document.body.style.backgroundColor = 'white'\n      showAlert(\"Light Mode Enabled\", \"success\")\n    }\n  }\n  return (\n    <><Router>\n      <Navbar title=\"Textutils\" aboutText=\"About\" mode={mode} colorMode = {colorMode} toggleMode={toggleMode}/>\n      <Alert alert={alert}/>\n      <br />\n      <div className=\"container my-3\">\n      <Switch>\n          <Route exact path=\"/about\">\n            <About />\n          </Route>\n          <Route exact path=\"/\">\n            <TextForm showAlert={showAlert} heading=\"Enter Your Text To Analize\" mode={mode}/>\n          </Route>\n        </Switch>\n      {/* <About/> */}\n      </div>\n      {/* <Navbar/> */}\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}